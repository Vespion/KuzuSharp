VERSION 0.8

# Setup the Linux environment
setup-clang:
	ARG CLANG_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/clang+llvm-17.0.6-x86_64-linux-gnu-ubuntu-22.04.tar.xz
	FROM ubuntu:mantic
	RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
		--mount=target=/var/cache/apt,type=cache,sharing=locked \
		rm -f /etc/apt/apt.conf.d/docker-clean \
		&& apt-get -y --no-install-recommends update \
		&& apt-get -y --no-install-recommends install \
			cmake make \
			wget2 ca-certificates \
			xz-utils zlib1g python3
	RUN wget2 --max-threads=$(nproc) $CLANG_URL && \
		tar -Jxf clang+llvm*.tar.xz && \
		rm clang+llvm*.tar.xz && \
		mv clang+llvm* /opt/clang

	ENV PATH=/opt/clang/bin:$PATH

setup-linux:
	FROM +setup-clang
	RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
		--mount=target=/var/cache/apt,type=cache,sharing=locked \
		rm -f /etc/apt/apt.conf.d/docker-clean \
		&& apt-get -y --no-install-recommends update \
		&& apt-get -y --no-install-recommends install \
			g++-x86-64-linux-gnu \
			g++-i686-linux-gnu \
			g++-arm-linux-gnueabi \
			g++-aarch64-linux-gnu

setup-linux-musl:
	FROM alpine:3.19
	RUN --mount=target=/var/cache/apk,type=cache,sharing=locked \
		apk update \
		&& apk add clang lld llvm cmake make python3 musl-dev compiler-rt

download-msvc:
	FROM alpine:3.19
	ARG git_buffer=/msvc-wine
	ARG install_buffer=/opt/msvc
    RUN --mount=target=/var/cache/apk,type=cache,sharing=locked \
   		apk update \
   		&& apk add \
   			python3 perl \
   			ca-certificates \
   			msitools
	GIT CLONE https://github.com/mstorsjo/msvc-wine $git_buffer
	ENV PYTHONUNBUFFERED=1
	RUN $git_buffer/vsdownload.py --dest $install_buffer --accept-license
	RUN $git_buffer/install.sh $install_buffer
	SAVE IMAGE --cache-hint
	SAVE ARTIFACT --keep-ts "$install_buffer/Windows Kits/*/" winKit
	SAVE ARTIFACT --keep-ts $install_buffer/vc/tools/msvc/*/ msvc
	SAVE ARTIFACT --keep-ts $git_buffer/msvcenv-native.sh wrapper-script

setup-win:
	FROM +setup-clang
	COPY +download-msvc/winKit /opt/winKit
	COPY +download-msvc/msvc /opt/msvc
	COPY +download-msvc/wrapper-script /opt/msvc/msvcenv-native.sh

setup-osx:
	FROM ghcr.io/shepherdjerred/macos-cross-compiler:latest


build-native:
	ARG --required OS
	ARG --required ARCH
	ARG CONFIGURATION=Release
	ARG OUTPUT_DIR=./obj/$CONFIGURATION/libs

	FROM +setup-$OS

	#This is done here so that the cache is not invalidated when the arch changes
	IF [ "$OS" = "win" ]
		RUN BIN=/opt/msvc/bin/$ARCH . /opt/msvc/msvcenv-native.sh
	END

	LET threadNum=$(nproc)

	LET target = release
	IF [ "$CONFIGURATION" = "Debug" ]
		SET target = debug
	END

	WORKDIR src
	COPY toolchains toolchains
	COPY kuzu kuzu
	WORKDIR kuzu

	RUN CMAKE_FLAGS="-DBUILD_SHELL=FALSE" make CMAKE_TOOLCHAIN_FILE=../toolchains/$OS-$ARCH.cmake SKIP_SINGLE_FILE_HEADER=1 NUM_THREADS=$threadNum $target
	RUN cmake --install build/$target --prefix install --strip

	SAVE ARTIFACT --keep-ts --if-exists install/lib/libkuzu* /$OS/$ARCH/ AS LOCAL $OUTPUT_DIR/$ARCH/

build-all-native:
	ARG CONFIGURATION=Release
	ARG OUTPUT_DIR=./obj/$CONFIGURATION/libs
	BUILD +build-native --OS=linux --ARCH=x64 --ARCH=x86 --ARCH=arm --ARCH=arm64 --CONFIGURATION=$CONFIGURATION --OUTPUT_DIR=$OUTPUT_DIR
	#BUILD +build-native --OS=linux-musl --ARCH=x64 --ARCH=x86 --ARCH=arm --ARCH=arm64 --CONFIGURATION=$CONFIGURATION --OUTPUT_DIR=$OUTPUT_DIR
	#BUILD +build-native --OS=win --ARCH=x64 --ARCH=x86 --CONFIGURATION=$CONFIGURATION --OUTPUT_DIR=$OUTPUT_DIR